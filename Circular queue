class CircularQueue:
    def __init__(self, size):
        self.size = size
        self.queue = [None] * size
        self.front = self.rear = -1

    def is_empty(self):
        return self.front == -1

    def is_full(self):
        return (self.rear + 1) % self.size == self.front

    def enqueue(self, value):
        if self.is_full():
            print("Queue is full. Enqueue operation failed.")
            return

        if self.is_empty():
            self.front = self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.size

        self.queue[self.rear] = value
        print(f"Enqueued: {value}")

    def dequeue(self):
        if self.is_empty():
            print("Queue is empty. Dequeue operation failed.")
            return None

        value = self.queue[self.front]

        if self.front == self.rear:
            self.front = self.rear = -1
        else:
            self.front = (self.front + 1) % self.size

        print(f"Dequeued: {value}")
        return value


# Demonstration
if __name__ == "__main__":
    # Create a circular queue of size 5
    circular_queue = CircularQueue(5)

    # Enqueue elements
    circular_queue.enqueue(10)
    circular_queue.enqueue(20)
    circular_queue.enqueue(30)
    circular_queue.enqueue(40)
    circular_queue.enqueue(50)


    # Dequeue elements
    circular_queue.dequeue()
    circular_queue.dequeue()
    circular_queue.dequeue()
    circular_queue.dequeue()
    circular_queue.dequeue()
